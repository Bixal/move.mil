# Runs a set of CI jobs for Drupal 8 projects.

orbs:
  aws-ecr: circleci/aws-ecr@6.12.2
  ecr-image-scan-findings: trussworks/orb-ecr-image-scan-findings@1.1.1

commands:
  deploy_app_steps:
    parameters:
      environment:
        type: string
      url:
        type: string
    steps:
      - checkout
      - run:
          name: Install AWS EB CLI
          command: |
            pip install awsebcli --upgrade --user
      - run:
          name: Update image tag to deploy
          command: |
            CONFIG=$(jq ".Image = {Update: true, Name: \"${AWS_ECR_ACCOUNT_URL}/${ECR_REPO}:${CIRCLE_SHA1}\"}" Dockerrun.aws.json)
            echo ${CONFIG} > Dockerrun.aws.json
            git add Dockerrun.aws.json
      - run:
          name: EB Deploy
          command: >
            eb deploy << parameters.environment >> --staged
      - run:
          name: Health check app site
          command: for retry in `seq 1 10`; do if curl -k -f -sS -o /dev/null << parameters.url >>; then echo Passed.; exit 0; else sleep $(($retry*3)); fi; done; exit 1

# Reusable steps.
## Defines images and working directory.
defaults: &defaults
  docker:
    - image: juampynr/drupal8ci:latest

    - image: selenium/standalone-chrome-debug:3.7.1-beryllium

    - image: mariadb:10.3
      environment:
        MYSQL_ALLOW_EMPTY_PASSWORD: 1

  working_directory: /opt/drupal

## Defines the cache restoring mechanism.
restore_cache: &restore_cache
  # We use the composer.json as a way to determine if we can cache our build.
  keys:
  - v1-dependencies-{{ checksum "composer.json" }}
  # fallback to using the latest cache if no exact match is found
  - v1-dependencies-

## Defines the cache saving mechanism.
save_cache: &save_cache
  paths:
    - ./vendor
  key: v1-dependencies-{{ checksum "composer.json" }}

#Jobs
## Job to run Unit and Kernel tests.
unit_kernel_tests: &unit_kernel_tests
  <<: *defaults
  steps:
    - checkout
    - restore_cache: *restore_cache
    - run:
        name: Set up and run Unit and Kernel tests
        command: |
          apache2-foreground&
          robo install:dependencies
          robo setup:drupal || true
          cp .circleci/config/phpunit.xml web/core/
          mkdir -p artifacts/phpunit
          chmod -R 777 artifacts
          cd web
          sudo -E -u www-data ../vendor/bin/phpunit -c core --debug --verbose --log-junit ../artifacts/phpunit/phpunit.xml modules/custom
    - store_test_results:
        path: /var/www/html/artifacts/phpunit
    - store_artifacts:
        path: /var/www/html/artifacts
    - save_cache: *save_cache

## Job to run the update path and Behat tests.
behat_tests: &behat_tests
  <<: *defaults
  steps:
    - checkout
    - restore_cache: *restore_cache
    - run:
        name: Wait for the database service to be ready
        command: dockerize -wait tcp://localhost:3306 -timeout 1m
    - run:
        name: Install database and run the update path
        command: |
          robo install:dependencies
          robo setup:drupal || true
          cd web
          # For a quick start, set the following environment variable to a URL that contains
          # a database dump. Alternativelly, give CircleCI access to your development environment
          # and use Drush site aliases to run `drush sql-sync`.
          ../vendor/bin/drupal config:import --directory=../config/sync --no-interaction
          ../vendor/bin/drupal cache:rebuild all
          cd ..
    - save_cache: *save_cache
    - run:
        name: Install ReactJS tools
        command: |
          apt-get update && apt-get install -y gnupg
          curl -sL https://deb.nodesource.com/setup_12.x | bash -
          apt-get update && apt-get install -y --no-install-recommends nodejs
          cd /var/www/html/web/modules/custom/react_tools/tools
          npm install
          npm rebuild node-sass
          CI=false npm run build
          npm test
          cd /var/www/html
    - run:
        name: Set up and run Behat tests
        command: |
          apache2-foreground&
          cp .circleci/config/behat.yml tests/
          chown -R www-data:www-data /var/www/html/web/sites/default/files
          vendor/bin/behat --verbose -c tests/behat.yml
    - store_test_results:
        path: /var/www/html/artifacts/behat
    - store_artifacts:
        path: /var/www/html/artifacts

## Job to check coding standards.
code_sniffer: &code_sniffer
  <<: *defaults
  steps:
    - checkout
    - restore_cache: *restore_cache
    - run:
        name: Set up and inspect coding standards
        command: |
          robo install:dependencies
          vendor/bin/phpcs --config-set installed_paths vendor/drupal/coder/coder_sniffer
          mkdir -p artifacts/phpcs
          vendor/bin/phpcs --standard=Drupal  --colors --extensions=php,module,inc,install,test,profile,theme --ignore=*node_modules/*,*bower_components/*,*vendor/*,*.min.js,*.min.css web/modules/custom/
          vendor/bin/phpcs --standard=DrupalPractice --colors --extensions=php,module,inc,install,test,profile,theme --ignore=*node_modules/*,*bower_components/*,*vendor/*,*.min.js,*.min.css web/modules/custom/
    - store_test_results:
        path: /var/www/html/artifacts/phpcs
    - store_artifacts:
        path: /var/www/html/artifacts
    - save_cache: *save_cache

## Job to check test coverage.
code_coverage: &code_coverage
  <<: *defaults
  steps:
    - checkout
    - restore_cache: *restore_cache
    - run:
        name: Set up and inspect code coverage
        environment:
          SIMPLETEST_BASE_URL: "http://localhost"
          SIMPLETEST_DB: "sqlite://localhost//tmp/drupal.sqlite"
          BROWSERTEST_OUTPUT_DIRECTORY: "/var/www/html/sites/simpletest"
        command: |
          robo install:dependencies
          robo setup:drupal || true
          cp .circleci/config/phpunit.xml web/core/
          mkdir -p artifacts/coverage-xml
          mkdir -p artifacts/coverage-html
          chmod -R 777 artifacts
          cd web
          timeout 60m sudo -E -u www-data ../vendor/bin/phpunit --verbose --debug -c core --coverage-xml ../artifacts/coverage-xml --coverage-html ../artifacts/coverage-html --testsuite nonfunctional modules/custom
          cd ../
          tar czf artifacts/coverage.tar.gz -C artifacts coverage-html coverage-xml
    - store_artifacts:
        path: /var/www/html/artifacts
    - save_cache: *save_cache

build_image: &build_image
  machine: true
  steps:
    - checkout
    - aws-ecr/build-and-push-image:
        account-url: AWS_ECR_ACCOUNT_URL
        aws-access-key-id: AWS_ACCESS_KEY_ID
        aws-secret-access-key: AWS_SECRET_ACCESS_KEY
        checkout: false
        dockerfile: docker/Dockerfile
        extra-build-args: "--build-arg GOOGLE_MAPS_API_KEY=$GOOGLE_MAPS_API_KEY"
        region: AWS_DEFAULT_REGION
        repo: "${ECR_REPO}"
        tag: "${CIRCLE_SHA1}"

version: 2.1
jobs:
  behat:
    <<: *behat_tests
  code-sniffer:
    <<: *code_sniffer
  code-coverage:
    <<: *code_coverage
  build-image:
    <<: *build_image
  deploy-app-stg:
    docker:
      - image: cimg/python:3.8
    steps:
      - deploy_app_steps:
          environment: movemil-stg
          url: https://movemil-stg.us-east-1.elasticbeanstalk.com/

workflows:
  version: 2.1
  app:
    jobs:
      - behat

      - code-sniffer

      - code-coverage

      - build-image

      - ecr-image-scan-findings/scan:
          requires:
            - build-image
          ecr-repository-name: ${ECR_REPO}

      - deploy-app-stg:
          requires:
            - behat
            - code-sniffer
            - code-coverage
            - build-image
            - ecr-image-scan-findings/scan
          #filters:
          #  branches:
          #    only: master
